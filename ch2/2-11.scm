(define (mul-interval x y)
    (let ((x0 (lower-bound x))
          (x1 (upper-bound x))
          (y0 (lower-bound y))
          (y1 (upper-bound y)))
        (cond ((and (< x0 0) (< x1 0))
                (cond ((and (< y0 0) (< y1 0))
                        (make-interval (* x1 y1)
                                       (* x0 y0)))
                      ((and (< y0 0) (> y1 0))
                        (make-interval (* x0 y1)
                                       (* x0 y0)))
                      (else
                        (make-interval (* x0 y1)
                                       (* x1 y0)))))
              ((and (< x0 0) (> x1 0))
                (cond ((and (< y0 0) (< y1 0))
                        (make-interval (* x1 y0)
                                       (* x0 y0)))
                      ((and (< y0 0) (> y1 0))
                        (let ((p1 (* x0 y1))
                              (p2 (* x1 y0))
                              (p3 (* x0 y0))
                              (p4 (* x1 y1)))
                            (make-interval (min p1 p2)
                                           (max p3 p4))))
                      (else
                        (make-interval (* x0 y1)
                                       (* x1 y1)))))
              (else
                (cond ((and (< y0 0) (< y1 0))
                        (make-interval (* x1 y0)
                                       (* x0 y1)))
                      ((and (< y0 0) (> y1 0))
                        (make-interval (* x1 y0)
                                       (* x1 y1)))
                      (else
                        (make-interval (* x0 y0)
                                       (* x1 y1))))))))
